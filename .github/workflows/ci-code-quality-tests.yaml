name: CI Code Quality Checks

on:
  push:
    branches:
      - dev
      - "feature/**"
      - "release/**"
      - "hotfix/**"
  pull_request:
    branches:
      - dev

jobs:
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    env:
      VITE_BACKEND_URL: https://localhost:8000
      NODE_ENV: CI
      CERT_DIR: "../certs/"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Set up Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version: "20.x"

      - name: Enable Corepack and Install Yarn
        run: |
          corepack enable
          yarn set version stable

      - name: Set up mkcert
        run: |
          sudo apt-get update
          sudo apt-get install libnss3-tools
          wget -O mkcert https://github.com/FiloSottile/mkcert/releases/download/v1.4.3/mkcert-v1.4.3-linux-amd64
          chmod +x mkcert
          sudo mv mkcert /usr/local/bin/
          mkcert -install

      - name: Generate HTTPS certificates
        run: |
          cd invoice-backend && mkdir certs && cd certs && \
          mkcert localhost
          # This will generate localhost.pem and localhost-key.pem

      - name: Copy certs to frontend directory
        run: cp -r invoice-backend/certs invoice-frontend/certs


      - name: Restore Frontend Cache
        uses: actions/cache@v4.2.0
        with:
          path: invoice-frontend/node_modules
          key: ${{ runner.os }}-frontend-yarn-${{ hashFiles('invoice-frontend/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-frontend-yarn-

      - name: Install Frontend Dependencies
        run: |
          cd invoice-frontend
          yarn install --frozen-lockfile

      - name: Save Frontend Cache
        uses: actions/cache@v4.2.0
        with:
          path: invoice-frontend/node_modules
          key: ${{ runner.os }}-frontend-yarn-${{ hashFiles('invoice-frontend/yarn.lock') }}

      - name: Lint
        run: |
          cd invoice-frontend
          npm run lint:fix

      - name: Run Frontend Tests
        run: |
          cd invoice-frontend
          npm run test:unit

      - name: Build Frontend Docker Image
        run: |
          cd invoice-frontend
          docker build -t djblackett/invoice-frontend:${{ github.sha }} .

      - name: Push Docker Image
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Frontend Image
        run: |
          docker push djblackett/invoice-frontend:${{ github.sha }}

  backend:
    name: Backend CI
    env:
      DATABASE_URL: postgres://postgres:example@localhost:5432/db-test
      REQUEST_ORIGIN: https://localhost:4173
      SECRET: theSecretStuff # not critical - only for ephemeral testing env
      NODE_ENV: CI
      CERT_DIR: "../certs/"
      DOMAIN: ${{ secrets.AUTH_DOMAIN }}
      AUDIENCE: ${{ secrets.AUDIENCE }}
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
    
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          PG_USER: postgres
          POSTGRES_PASSWORD: example
          POSTGRES_DB: db-test
          
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Set up Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version: "20.x"

      - name: Enable Corepack and Install Yarn
        run: |
          corepack enable
          yarn set version stable

      - name: Set up mkcert
        run: |
          sudo apt-get update
          sudo apt-get install libnss3-tools
          wget -O mkcert https://github.com/FiloSottile/mkcert/releases/download/v1.4.3/mkcert-v1.4.3-linux-amd64
          chmod +x mkcert
          sudo mv mkcert /usr/local/bin/
          mkcert -install

      - name: Generate HTTPS certificates
        run: |
          cd invoice-backend && mkdir certs && cd certs && \
          mkcert localhost
          cat localhost.pem > localhost-fullchain.pem
          cat "$(mkcert -CAROOT)/rootCA.pem" >> localhost-fullchain.pem

      # - name: Restore Cache
      #   uses: actions/cache@v4.2.0
      #   with:
      #     path: invoice-backend/node_modules
      #     key: ${{ runner.os }}-node-${{ hashFiles('invoice-backend/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-

      - name: Install Backend Dependencies
        run: |
          cd invoice-backend
          yarn install --frozen-lockfile

      - name: Save Backend Cache
        uses: actions/cache@v4.2.0
        with:
          path: invoice-backend/node_modules
          key: ${{ runner.os }}-backend-yarn-${{ hashFiles('invoice-backend/yarn.lock') }}

      - name: Wait for PostgreSQL to be Ready
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 5
          done

      - name: Test Database Connection
        env:
          PGPASSWORD: example
        run: |
          psql -h localhost -U postgres -d db-test -c '\l'

      - name: Lint
        run: |
          cd invoice-backend
          npm run lint:fix

      - name: Initialize Prisma
        run: |
          cd invoice-backend
          npm run prisma-generate && npm run prisma-push

      - name: Run Unit Tests
        run: |
          cd invoice-backend
          npm run test:unit

      - name: Run Integration Tests
        run: |
          cd invoice-backend
          npm run test:integration

      - name: Build Docker Image
        run: |
          cd invoice-backend
          docker build -t djblackett/invoice-backend:${{ github.sha }} .

      - name: Push Docker Image
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Backend Image
        run: |
          docker push djblackett/invoice-backend:${{ github.sha }}
