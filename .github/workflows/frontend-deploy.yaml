name: Build and Deploy to GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - "invoice-frontend/**" # Triggers on any changes within the frontend directory
      - ".github/workflows/frontend-deploy.yaml" # Triggers on PRs that modify the workflow file
  pull_request:
    branches:
      - main
    paths:
      - "invoice-frontend/**" # Triggers on PRs that modify the frontend directory
      - ".github/workflows/frontend-deploy.yaml" # Triggers on PRs that modify the workflow file

jobs:
  test:
    name: Comprehensive testing - unit, integration, and e2e
    env:
      DATABASE_URL: postgres://postgres:example@localhost:5432/db-test
      REQUEST_ORIGIN: https://localhost:4173
      SECRET: theSecretStuff # not critical - only for ephemeral testing env
      VITE_BACKEND_URL: https://localhost:8000
      VITE_REDIRECT_URI: https://localhost:5173/invoice-web-app/
      NODE_ENV: CI
      CERT_DIR: "../certs/"
      TEST_LOGIN: ${{ secrets.TEST_LOGIN }}
      TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
      TEST_BASE_URL: https://localhost:4173/invoice-web-app/
      VITE_DOMAIN: ${{ secrets.AUTH_DOMAIN }}
      VITE_AUDIENCE: ${{ secrets.AUDIENCE }}
      VITE_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      VITE_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      VITE_SCOPE: ${{ secrets.AUTH_SCOPE }}


    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          PG_USER: postgres
          POSTGRES_PASSWORD: example
          POSTGRES_DB: db-test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Check NODE_ENV
        run: |
          echo "NODE_ENV is: $NODE_ENV"

      - name: Collect Workflow Telemetry
        uses: catchpoint/workflow-telemetry-action@v2

      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Set up Node.js and Yarn
        uses: actions/setup-node@v4.1.0
        with:
          node-version: "20.x"

      - name: Enable Corepack and Install Yarn
        run: |
          corepack enable
          corepack prepare yarn@1.22.22 --activate

      - name: Set up mkcert
        run: |
          sudo apt-get update
          sudo apt-get install libnss3-tools
          wget -O mkcert https://github.com/FiloSottile/mkcert/releases/download/v1.4.3/mkcert-v1.4.3-linux-amd64
          chmod +x mkcert
          sudo mv mkcert /usr/local/bin/
          mkcert -install

      - name: Generate HTTPS certificates
        run: |
          cd invoice-backend && mkdir certs && cd certs && \
          mkcert localhost
          cat localhost.pem > localhost-fullchain.pem
          cat "$(mkcert -CAROOT)/rootCA.pem" >> localhost-fullchain.pem
          

      - name: Copy certs to frontend directory
        run: cp -r invoice-backend/certs invoice-frontend/certs

      - name: Restore Frontend Cache
        uses: actions/cache@v4.2.0
        with:
          path: invoice-frontend/node_modules
          key: ${{ runner.os }}-frontend-yarn-${{ hashFiles('invoice-frontend/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-frontend-yarn-

      # - name: Restore Backend Cache
      #   uses: actions/cache@v4.2.0
      #   with:
      #     path: invoice-backend/node_modules
      #     key: ${{ runner.os }}-backend-yarn-${{ hashFiles('invoice-backend/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-backend-yarn-

      - name: Install Frontend Dependencies
        run: |
          cd invoice-frontend
          yarn install --frozen-lockfile

      - name: Install Backend Dependencies
        run: |
          cd invoice-backend
          yarn install --frozen-lockfile

      - name: Install Playwright Browsers
        run: |
          # Set the Playwright browsers path to a cacheable directory
          # export PLAYWRIGHT_BROWSERS_PATH=.cache/ms-playwright
          # Install Playwright (ensure it's listed in your dependencies)
          cd invoice-frontend
          sudo apt-get update && yarn playwright install --with-deps

      - name: Save Frontend Cache
        uses: actions/cache@v4.2.0
        with:
          path: invoice-frontend/node_modules
          key: ${{ runner.os }}-frontend-yarn-${{ hashFiles('invoice-frontend/yarn.lock') }}

      - name: Save Backend Cache
        uses: actions/cache@v4.2.0
        with:
          path: invoice-backend/node_modules
          key: ${{ runner.os }}-backend-yarn-${{ hashFiles('invoice-backend/yarn.lock') }}

      - name: Wait for PostgreSQL to be Ready
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 5
          done

      - name: Test Database Connection
        env:
          PGPASSWORD: example
        run: |
          psql -h localhost -U postgres -d db-test -c '\l'

      - name: Lint backend
        run: |
          cd invoice-backend
          yarn lint

      - name: Lint frontend
        run: |
          cd invoice-frontend
          yarn lint

      - name: Initialize Prisma
        run: |
          cd invoice-backend
          yarn prisma-generate && yarn prisma-push

      - name: Run backend tests (unit and integration)
        run: |
          cd invoice-backend
          yarn test:unit
          
      - name: Run integration tests
        run: |
          cd invoice-backend
          yarn test:integration

      - name: Run backend server for e2e tests
        run: |
          cd invoice-backend
          yarn start:test & echo "Backend server running" &&
          sleep 2

      - name: GraphQL health check
        run: |
          curl \
          -X POST \
          -H "Content-Type: application/json" \
          -d '{"query":"{ __typename }"}' \
          https://localhost:8000/graphql

      - name: Run frontend unit tests
        run: |
          cd invoice-frontend
          yarn test:unit

      - name: Run frontend server for e2e tests`
        run: |
          cd invoice-frontend
          yarn build && yarn preview &
          sleep 1

      - name: Wait for frontend
        run: npx wait-on https://localhost:4173/invoice-web-app/

      - name: Run Playwright e2e tests
        run: |
          cd invoice-frontend
          DEBUG=pw:api yarn playwright test
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: invoice-frontend/playwright-report/
          retention-days: 30

      # Save network logs as artifacts
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: network-logs-screenshots
          path: |
            **/network_logs.json
            **/trace.har
            screenshot-*.png
            page.html

  build:
    runs-on: ubuntu-latest
    needs: test
    env:
      VITE_BACKEND_URL: https://${{ secrets.VITE_BACKEND_URL}} # Currently points to backend server on Fly.io
      VITE_REDIRECT_URI: https://djblackett.github.io/invoice-web-app/
      FRONTEND_DIR: invoice-frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Set up Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version: "20.x"

      - name: Enable Corepack and Install Yarn
        run: |
          corepack enable
          corepack prepare yarn@1.22.22 --activate

      - name: Set up mkcert
        run: |
          sudo apt-get update
          sudo apt-get install libnss3-tools
          wget -O mkcert https://github.com/FiloSottile/mkcert/releases/download/v1.4.3/mkcert-v1.4.3-linux-amd64
          chmod +x mkcert
          sudo mv mkcert /usr/local/bin/
          mkcert -install

      - name: create certs
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          mkdir certs && cd certs && \
          mkcert localhost

      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: yarn install --frozen-lockfile

      - name: Build the project
        working-directory: ${{ env.FRONTEND_DIR }}
        run: yarn build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./${{ env.FRONTEND_DIR }}/dist
