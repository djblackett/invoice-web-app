name: Build and Deploy to GitHub Pages

on:
  push:
    branches:
      - main
    # paths:
    #   - "invoice-frontend/**" # Triggers on any changes within the frontend directory
  pull_request:
    branches:
      - main
    paths:
      - "invoice-frontend/**" # Triggers on PRs that modify the frontend directory

jobs:
  test:
    name: Comprehensive test
    env:
      DATABASE_URL: postgres://postgres:example@localhost:5432/db-test
      REQUEST_ORIGIN: http://localhost:4173
      SECRET: theSecretStuff # not critical
      VITE_BACKEND_URL: http://localhost:8000/graphql
      REACT_APP_ENV: test

    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          PG_USER: postgres
          POSTGRES_PASSWORD: example
          POSTGRES_DB: db-test

        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Collect Workflow Telemetry
        uses: catchpoint/workflow-telemetry-action@v2

      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Set up Node.js and Yarn
        uses: actions/setup-node@v4.1.0
        with:
          node-version: "20.x"

      - name: Enable Corepack and Install Yarn
        run: |
          corepack enable
          corepack prepare yarn@1.22.22 --activate

      - name: Restore Frontend Cache
        uses: actions/cache@v4.2.0
        with:
          path: invoice-frontend/node_modules
          key: ${{ runner.os }}-frontend-yarn-${{ hashFiles('invoice-frontend/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-frontend-yarn-

      - name: Restore Backend Cache
        uses: actions/cache@v4.2.0
        with:
          path: invoice-backend/node_modules
          key: ${{ runner.os }}-backend-yarn-${{ hashFiles('invoice-backend/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-backend-yarn-

      # # Step 6: Restore Playwright Browser Binaries Cache
      # - name: Restore Playwright Cache
      #   uses: actions/cache@v4.2.0
      #   with:
      #     path: invoice-frontend/.cache/ms-playwright
      #     key: ${{ runner.os }}-playwright-${{ hashFiles('**/playwright.config.js') }}
      #     restore-keys: |
      #       ${{ runner.os }}-playwright-

      - name: Install Frontend Dependencies
        run: |
          cd invoice-frontend
          yarn install --frozen-lockfile

      - name: Install Backend Dependencies
        run: |
          cd invoice-backend
          yarn install --frozen-lockfile

      - name: Install Playwright Browsers
        run: |
          # Set the Playwright browsers path to a cacheable directory
          # export PLAYWRIGHT_BROWSERS_PATH=.cache/ms-playwright
          # Install Playwright (ensure it's listed in your dependencies)
          cd invoice-frontend
          sudo apt-get update &&yarn playwright install --with-deps

      # Step 10: Save Playwright Browser Binaries Cache
      # - name: Save Playwright Cache
      #   uses: actions/cache@v4.2.0
      #   with:
      #     path: .cache/ms-playwright
      #     key: ${{ runner.os }}-playwright-${{ hashFiles('**/playwright.config.js') }}

      - name: Save Frontend Cache
        uses: actions/cache@v4.2.0
        with:
          path: invoice-frontend/node_modules
          key: ${{ runner.os }}-frontend-yarn-${{ hashFiles('invoice-frontend/yarn.lock') }}

      - name: Save Backend Cache
        uses: actions/cache@v4.2.0
        with:
          path: invoice-backend/node_modules
          key: ${{ runner.os }}-backend-yarn-${{ hashFiles('invoice-backend/yarn.lock') }}

      - name: Wait for PostgreSQL to be Ready
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 5
          done

      - name: Test Database Connection
        env:
          PGPASSWORD: example
        run: |
          psql -h localhost -U postgres -d db-test -c '\l'

      - name: Lint backend
        run: |
          cd invoice-backend
          npm run lint

      - name: Lint frontend
        run: |
          cd invoice-frontend
          npm run lint

      - name: Initialize Prisma
        run: |
          cd invoice-backend
          npm run prisma-generate && npm run prisma-push

      - name: Run backend tests (unit and integration)
        run: |
          cd invoice-backend
          npm run test:unit && npm run test:integration

      - name: Run frontend unit tests
        run: |
          cd invoice-frontend
          npm run test:unit

      - name: Run Playwright e2e tests
        run: |
          cd invoice-frontend
          DEBUG=pw:api npx playwright test
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: invoice-frontend/playwright-report/
          retention-days: 30

  build:
    runs-on: ubuntu-latest
    # needs: test
    env:
      VITE_BACKEND_URL: https://${{ secrets.VITE_BACKEND_URL}} # This must be updated once I know the URL
      FRONTEND_DIR: invoice-frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Set up Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version: "20.x"

      - name: Enable Corepack and Install Yarn
        run: |
          corepack enable
          corepack prepare yarn@1.22.22 --activate

      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: yarn install --frozen-lockfile

      - name: Build the project
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./${{ env.FRONTEND_DIR }}/dist # Adjust this if your build output directory differs
          # If you want to deploy to a specific branch (e.g., gh-pages), you can specify:
          # publish_branch: gh-pages
