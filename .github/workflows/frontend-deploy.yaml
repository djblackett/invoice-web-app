name: Build and Deploy to GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - "invoice-frontend/**" # Triggers on any changes within the frontend directory
  pull_request:
    branches:
      - main
    paths:
      - "invoice-frontend/**" # Triggers on PRs that modify the frontend directory

jobs:
  setup:
    name: Setup and Cache
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Cache Node Modules
        id: cache-deps
        uses: actions/cache@v4.2.0
        with:
          path: |
            invoice-frontend/node_modules
            invoice-backend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  test:
    name: Comprehensive test
    needs: setup
    env:
      DATABASE_URL: postgres://postgres:example@localhost:5432/db-test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          PG_USER: postgres
          POSTGRES_PASSWORD: example
          POSTGRES_DB: db-test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Set up Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version: "20.x"

      - name: Restore Cache
        uses: actions/cache@v4.2.0
        with:
          path: invoice-backend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('invoice-backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: |
          cd invoice-backend
          npm ci

      - name: Wait for PostgreSQL to be Ready
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 5
          done

      - name: Test Database Connection
        env:
          PGPASSWORD: example
        run: |
          psql -h localhost -U postgres -d db-test -c '\l'

      - name: Lint
        run: |
          cd invoice-backend
          npm run lint

      - name: Initialize Prisma
        run: |
          cd invoice-backend
          npm run prisma-generate && npm run prisma-push

      - name: Run Tests
        run: |
          cd invoice-backend
          npm run test:unit && npm run test:integration

      - name: Restore Cache
        uses: actions/cache@v4.2.0
        with:
          path: invoice-frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('invoice-frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: |
          cd invoice-frontend
          npm ci

      - name: Lint
        run: |
          cd invoice-frontend
          npm run lint

      - name: Run Tests
        run: |
          cd invoice-frontend
          npx playwright install
          npm run dev &  # Run the development server in the background
          SERVER_PID=$!   # Capture the PID of the background process
          npx wait-on http://localhost:3000  # Wait until the server is up
          npm run test:unit && npm run test:e2e
          kill $SERVER_PID  # Terminate the server after tests
        # Optionally, install wait-on temporarily
        # install wait-on
        # npm install wait-on --no-save

  build:
    runs-on: ubuntu-latest
    needs: test
    env:
      REACT_APP_BACKEND_URL: http://localhost:8000 # This must be updated once I know the URL
      FRONTEND_DIR: invoice-frontend
    strategy:
      matrix:
        node-version: [22.x] # You can adjust the Node.js version if needed

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Set up Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci

      - name: Build the project
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ env.FRONTEND_DIR }}/dist # Adjust this if your build output directory differs
          # If you want to deploy to a specific branch (e.g., gh-pages), you can specify:
          # publish_branch: gh-pages
