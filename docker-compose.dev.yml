services:
  frontend-dev:
    build:
      context: invoice-frontend
      dockerfile: dev.Dockerfile
    # The VITE_BACKEND_URL environment variable is used to connect the frontend to the backend
    # The value is set to the backend server URL
    # For running PW tests from inside a docker container, the URL should be the service name - https://backend-dev:8000/graphql
    environment:
      - VITE_BACKEND_URL=https://backend-dev/graphql # This is the URL for the backend server
    ports:
      - "5173:5173"
    networks:
      - my_network_dev
    volumes:
      - ./invoice-frontend:/usr/src/app/
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:5173/invoice-web-app/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  backend-dev:
    build:
      context: invoice-backend
      dockerfile: dev.Dockerfile
    depends_on:
      db-dev:
        condition: service_started
    restart: unless-stopped
    ports:
      - "8000:8000"
    command: sh -c "npx prisma@5.22.0 generate && npx prisma db push && DATABASE_URL=postgresql://postgres:example@db-dev:5432/db-dev?schema=public npm run dev"
    environment:
      - NODE_ENV=development
      - PORT=8000
      - REQUEST_ORIGIN=https://localhost
      - SECRET=theSecretStuff
      - DATABASE_URL=postgres://postgres:example@db-dev:5432/db-dev?schema=public&connect_timout=300
    networks:
      - my_network_dev
    volumes:
      - ./invoice-backend:/usr/src/app/
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  db-dev:
    image: postgres:16.1
    hostname: db-dev
    container_name: db-dev
    restart: always
    environment:
      POSTGRES_PASSWORD: example
      PGUSER: postgres
      POSTGRES_USER: postgres
    ports:
      - "5432:5432"
    networks:
      - my_network_dev
    volumes:
      - pgdata-dev:/var/lib/postgresql/data
      - ./init.dev.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5


  adminer-dev:
    image: adminer:4.8.1
    restart: always
    ports:
      - 8080:8080
    networks:
      - my_network_dev

  proxy-dev:
    image: nginx:1.25.2
    hostname: proxy-dev
    container_name: proxy-dev
    depends_on:
      backend-dev:
        condition: service_started
      frontend-dev:
        condition: service_started
    tty: true
    stdin_open: true
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    networks:
      - my_network_dev

  playwright-e2e:
    depends_on:
      frontend-dev:
        condition: service_healthy
      backend-dev:
        condition: service_healthy

    image: mcr.microsoft.com/playwright:v1.49.1-noble
    container_name: playwright-e2e
    working_dir: /app
    volumes:
      # # Mount the current directory (host) to /app (container)
      # - ./invoice-frontend/qa:/app/qa
      # - ./invoice-frontend/.env:/app/.env
      # # Optionally, mount the Playwright config if needed
      # - ./invoice-frontend/playwright.config.ts:/app/playwright.config.ts
      # - ./invoice-frontend/global-setup.ts:/app/global-setup.ts
      # # Mount node_modules if needed to use host's modules
      # - ./invoice-frontend/node_modules:/app/node_modules
      - ./invoice-frontend:/app
    # entrypoint: ["npx", "playwright", "test"]
    env_file:
      - invoice-frontend/.env
    environment:
      # Pass necessary environment variables
      NODE_ENV: development
      TEST_ENV: local
      TEST_BASE_URL: https://frontend-dev:5173/invoice-web-app/
    networks:
      - my_network_dev
    # Allow interactive runs (e.g., debugging or watching tests)
    stdin_open: true
    tty: true



networks:
  my_network_dev:
    driver: bridge

volumes:
  pgdata-dev:
