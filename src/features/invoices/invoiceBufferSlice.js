import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

import data from "../../data.json";

const initialState = {
  data: data,
};

export const invoiceBufferSlice = createSlice({
  name: "invoiceBuffer",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addInvoice: (state, action) => {
      //  generate id here
      state.data.push(action.payload);
    },
    removeInvoice: (state, action) => {
      state.data = state.data.filter(
        (invoice) => invoice.id !== action.payload
      );
    },
    updateInvoice: (state, action) => {
      state.data = state.data.filter(
        (invoice) => invoice.id !== action.payload
      );
      state.data.push(action.payload);
    },
    markAsPaid: (state, action) => {
      let invoice1 = state.data.find(
        (invoice) => invoice.id === action.payload
      );
      invoice1.status = "paid";

      // debugging info
      // invoice1 = state.data.find((invoice) => invoice.id === action.payload);
      // console.log(JSON.parse(JSON.stringify(invoice1)));
    },
    addItem: (state, action) => {
      const { id, newItem } = action.payload;
      const invoice = state.data.find((invoice) => invoice.id === id);
      invoice.items.push(newItem);
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    // extraReducers: (builder) => {
    //   builder
    //     .addCase(incrementAsync.pending, (state) => {
    //       state.status = "loading";
    //     })
    //     .addCase(incrementAsync.fulfilled, (state, action) => {
    //       state.status = "idle";
    //       state.value += action.payload;
    //     });
  },
});

export const { addInvoice, removeInvoice, updateInvoice, markAsPaid, addItem } =
  invoiceBufferSlice.actions;

export const selectInvoices = (state) => state.invoices.data;

export default invoiceBufferSlice.reducer;
