import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { v4 as uuidv4 } from "uuid";
import data from "../../data.json";

const initialState = {
  data: data,
};

export const invoicesSlice = createSlice({
  name: "invoices",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addInvoice: (state, action) => {
      //  generate id here
      state.data.push(action.payload);
    },
    removeInvoice: (state, action) => {
      state.data = state.data.filter(
        (invoice) => invoice.id !== action.payload
      );
    },
    updateInvoice: (state, action) => {
      // state.data = state.data.filter(
      //   (invoice) => invoice.id !== action.payload.id
      // );

      const oldInvoice = state.data.find(
        (invoice) => invoice.id === action.payload.id
      );

      const index = state.data.indexOf(oldInvoice);
      state.data.splice(index, 1, action.payload);
    },
    markAsPaid: (state, action) => {
      let invoice1 = state.data.find(
        (invoice) => invoice.id === action.payload
      );
      invoice1.status = "paid";

      // debugging info
      // invoice1 = state.data.find((invoice) => invoice.id === action.payload);
      // console.log(JSON.parse(JSON.stringify(invoice1)));
    },
    addItem: (state, action) => {
      const { id, newItem } = action.payload;
      const invoice = state.data.find((invoice) => invoice.id === id);
      invoice.items.push(newItem);
    },
    addIdToExistingInvoices: (state, action) => {
      for (let i of state.data) {
        // console.log(i);
        for (let item of i.items) {
          if (!item.id) {
            item["id"] = uuidv4();
          }
        }
      }

      // state.data = state.data.forEach((invoice) => {
      //   invoice.items.forEach((item) => {
      //     if (!item.id) {
      //       item["id"] = uuidv4();
      //     }
      //   });
      // });
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = "loading";
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = "idle";
  //       state.value += action.payload;
  //     });
});

export const {
  addInvoice,
  removeInvoice,
  updateInvoice,
  markAsPaid,
  addItem,
  addIdToExistingInvoices,
} = invoicesSlice.actions;

export const selectInvoices = (state) => state.invoices.data;

export default invoicesSlice.reducer;
